
:root {
	--bg-color: rgba(150, 150, 150, 1);

	/* Border Colors are all transparent colors. These will tint or shade the background color of the square. */
	--border-color: #eaeaea40;
	--border-color-l: var(--border-color);
	--border-color-t: var(--border-color);
	--border-color-r: var(--border-color);
	--border-color-b: var(--border-color);

	/* Square Colors:  background colors for the squares.*/
	--color-0: #eaeaea;
	--color-1: #ff6600;
	--color-2: #eec900;
	--color-3: #0000ff;
	--color-4: #cc00ff;
	--color-5: #00ff00;
	--color-6: #66ccff;
	--color-7: #ff0000;

	/* Button Colors */
	--button-color-t: rgba(200, 200, 200, 1);
	--button-color-r: rgba(150, 150, 150, 1);
	--button-color-b: rgba(120, 120, 120, 1);
	--button-color-l: rgba(222, 222, 222, 1);

	/* Numbers define values that will be used throughout the CSS.
	--tile-size: 20px for example will set size of the grid squares. */
	--cols: 10;
	--rows: 18;
	--tile-size: 20px;
	--border-width: 1px;
}

.color-0 {
	background-color: var(--color-0);
}

.color-1 {
	background-color: var(--color-1);
}

.color-2 {
	background-color: var(--color-2);
}

.color-3 {
	background-color: var(--color-3);
}

.color-4 {
	background-color: var(--color-4);
}

.color-5 {
	background-color: var(--color-5);
}

.color-6 {
	background-color: var(--color-6);
}

.color-7 {
	background-color: var(--color-7);
}

/* Grid Square */
.square {
	border-style: solid;
	width: var(--tile-size);
	height: var(--tile-size);
	border-width: var(--border-width);
	border-top-color: var(--border-color-l);
	border-left-color: var(--border-color-t);
	border-right-color: var(--border-color-r);
	border-bottom-color: var(--border-color-b);
}

/* tells the browser to calculate the size boxes to include the border width rather than adding the border, which is the default */
* {
	box-sizing: border-box;
}

/* App */
.app {
	--col-side: calc(var(--tile-size) * 4);
	--col-center: calc(var(--tile-size) * 10);
	--grid-height: calc(var(--tile-size) * 18);

	width: calc(var(--tile-size) * (4 + 1 + 10 + 1 + 4));
	margin: auto;
	display: grid;

	grid-gap: var(--tile-size) var(--tile-size);
	/* Defines three columns of `--col-side`, `--col-center`, and `--col-side` widths. */
	grid-template-columns: var(--col-side) var(--col-center) var(--col-side);
	/* Defines three rows of 1, `--grid-height`, and 1. */
	grid-template-rows: 1 var(--grid-height) 1;

/* This defines the areas on the grid with names: 'h', 'l', 'c', 'r',
and 'b'. The '.' represents an empty cell on the grid. */
	grid-template-areas: "h h h"
	                     "l c r"
	                     ". b .";
}

.head {
	background-color: #282c34;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	font-size: calc(10px + 2vmin);
	color: white;

	grid-area: h;

}

/* Next Block */
.next {
	display: grid;
	box-shadow: 0 0 24px #00ff00;
	grid-template-columns: repeat(4, var(--tile-size));
	align-self: flex-start;

	grid-area: l;
}

/* Grid Board - This defines the `grid-board` to display as `grid`. This causes the children of this element to arrange on a grid. The number of columns is set by `--cols` var and the width of each column is set by `--tile-size`. These two CSS custom properties are defined in `:root` which allow them to be easily changed.*/
.board {
	display: grid;
	box-shadow: 0 0 24px #00ff00;
	grid-template-columns: repeat(var(--cols), var(--tile-size));
	grid-gap: 0;
	align-self: flex-start;
	grid-area: c;
}

.score {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	grid-area: r;
}

.controls {
	display: flex;
	flex-direction: row;
	justify-content: center;

	grid-area: b;
}


/* Message Popup - These styles apply to the `MessagePopup` container. With `position:absolute` this element can be placed anywhere on the screen, `left, top, transform:translate` perform this function.*/
.overlay {
	position: absolute;
	display: flex;
	flex-direction: column;
	justify-content: center;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
	width: 100vw;
	height: 100vh;
	border-color: black;
	border: dotted;
	background-color: rgba(255, 255, 255, 0.85);
	text-align: center;
}

.overlay {
	height: 50vh;
	top: 75vh;
	font-size: 2em;
}

/* This style is applied only when the message popup container
has both `message-popup` class and the `hidden` class. In this
case the Message Popup is not displayed */
.overlay.hidden {
	display: none;
}

button {
	padding: 0;
	padding: 0.5em;
	margin-top: 10px;
	border-radius: 2em;
	border-width: 0;
}
